#include "gtest/gtest.h"
#include "toLLVM.h"
#include "raiseX86.h"
//#define DEBUG

#include "../common/RegisterState.h"
#include "../common/to_string.h"

#include <boost/graph/breadth_first_search.hpp>
#include <boost/algorithm/string.hpp>

#ifdef _WIN32
#include <windows.h>
#include <stdio.h>
#include <float.h>
#include <math.h>
#pragma float_control(precise, on)
#pragma fenv_access(on)
#else
#include <sys/mman.h>
#include <dlfcn.h>
#ifndef __APPLE__
#ifndef __MACH__
#include <asm/mman.h>
#endif
#endif
#endif

#include "llvm/ExecutionEngine/GenericValue.h"
#include "llvm/ExecutionEngine/Interpreter.h"
#include "llvm/ExecutionEngine/JIT.h"
#include <llvm/ADT/StringSwitch.h>

#include <boost/algorithm/string/predicate.hpp>
#include <boost/lexical_cast.hpp>
#include <cstdio>
#include <string>
#include <iostream>

using namespace llvm;
using namespace std;

#ifdef __x86_64__
    #ifdef __linux__
        #define TRIPLE "x86_64-pc-linux-gnu"
    #elif defined(_WIN32)
        #define TRIPLE "x86_64-pc-win32"
    #elif defined(__APPLE__)
        #define TRIPLE "x86_64-apple-darwin"
    #else
        #error Building on an unsupported OS
    #endif
#else
    #ifdef __linux__
        #define TRIPLE "i386-pc-linux-gnu"
    #elif defined(_WIN32)
        #define TRIPLE "i386-pc-win32"
    #elif defined(__APPLE__)
        #define TRIPLE "i386-apple-darwin"
    #else
        #error Building on an unsupported OS
    #endif
#endif

#define STACK_LEN 40960

enum fputag_vals {
    FPU_TAG_VALID = 0,
    FPU_TAG_ZERO = 1,
    FPU_TAG_SPECIAL = 2,
    FPU_TAG_EMPTY = 3
};

#define TESTS_GENERAL (1<<0) 
#define TESTS_FPU     (1<<1) 
#define TESTS_TO_RUN  (TESTS_FPU|TESTS_GENERAL)
//#define TESTS_TO_RUN  (TESTS_FPU)

const uint64_t FLAG_CF = 1 << 0;
const uint64_t FLAG_PF = 1 << 1;
const uint64_t FLAG_AF = 1 << 2;
const uint64_t FLAG_ZF = 1 << 3;
const uint64_t FLAG_SF = 1 << 4;
const uint64_t FLAG_OF = 1 << 5;
const uint64_t FLAG_DF = 1 << 6;

const uint64_t FLAG_FPU_BUSY = 1 << 7;
const uint64_t FLAG_FPU_C3 =   1 << 8;
const uint64_t FLAG_FPU_TOP =  1 << 9;
const uint64_t FLAG_FPU_C2 =   1 << 10;
const uint64_t FLAG_FPU_C1 =   1 << 11;
const uint64_t FLAG_FPU_C0 =   1 << 12;
const uint64_t FLAG_FPU_ES =   1 << 13;
const uint64_t FLAG_FPU_SF =   1 << 14;
const uint64_t FLAG_FPU_PE =   1 << 15;
const uint64_t FLAG_FPU_UE =   1 << 16;
const uint64_t FLAG_FPU_OE =   1 << 17;
const uint64_t FLAG_FPU_ZE =   1 << 18;
const uint64_t FLAG_FPU_DE =   1 << 19;
const uint64_t FLAG_FPU_IE =   1 << 20;


uint8_t g_stackMem[STACK_LEN];

// Some helpers for testing.
// Need functions to create function headers and function footers.

Function *initTestFunction(string testName, Module *M) {
    FunctionType *FT = getBaseFunctionType(M);
    Constant     *FC = M->getOrInsertFunction((testName +"_func"), FT);
    Function     *F = dyn_cast<Function>(FC);

    assert(F != NULL);

    BasicBlock  *entryBlock = BasicBlock::Create(F->getContext(),
                                                 "entry", 
                                                 F);
    assert(entryBlock != NULL);

    if(getPointerSize(M) == Pointer32){
        allocateLocals(F, 32);
        writeContextToLocals(entryBlock, 32, AllRegs);
    } else {
        allocateLocals(F, 64);
        writeContextToLocals(entryBlock, 64, AllRegs);
    }

    return F;
}

void finiTestFunction(BasicBlock *e) {
    
    Module *M = e->getParent()->getParent();

    // Spill the locals back to the context.
    if(getPointerSize(M) == Pointer32){
        writeLocalsToContext(e, 32, AllRegs);
    } else {
        writeLocalsToContext(e, 64, AllRegs);
    }

    // Return from the function.
    ReturnInst::Create(e->getContext(), e);

    return;
}

typedef map<string, uint64_t>    testCaseToFlags;
typedef map<string, int>         testCaseToTestIDT;
typedef pair<mcsema::RegState, mcsema::RegState> InOutT;
typedef map<int, InOutT>         testIDToInOutT;

enum ScanningState {
    TestCase,
    InputCase,
    OutputCase
};

void* getRegPtr(const string &regName, mcsema::RegState *regs) {
    void *regptr = StringSwitch<void*>(regName)
#ifndef __x86_64__
                    .Case("EAX", &(regs->EAX))
                    .Case("EBX", &(regs->EBX))
                    .Case("ECX", &(regs->ECX))
                    .Case("EDX", &(regs->EDX))
                    .Case("ESI", &(regs->ESI))
                    .Case("EDI", &(regs->EDI))
                    .Case("ESP", &(regs->ESP))
                    .Case("EBP", &(regs->EBP))
#else
                    .Case("RAX", &(regs->RAX))
                    .Case("RBX", &(regs->RBX))
                    .Case("RCX", &(regs->RCX))
                    .Case("RDX", &(regs->RDX))
                    .Case("RSI", &(regs->RSI))
                    .Case("RDI", &(regs->RDI))
                    .Case("RSP", &(regs->RSP))
                    .Case("RBP", &(regs->RBP))
                    .Case("R8", &(regs->R8))
                    .Case("R9", &(regs->R9))
                    .Case("R10", &(regs->R10))
                    .Case("R11", &(regs->R11))
                    .Case("R12", &(regs->R12))
                    .Case("R13", &(regs->R13))
                    .Case("R14", &(regs->R14))
                    .Case("R15", &(regs->R15))
#endif
                    .Case("CF", &(regs->CF))
                    .Case("PF", &(regs->PF))
                    .Case("AF", &(regs->AF))
                    .Case("ZF", &(regs->ZF))
                    .Case("SF", &(regs->SF))
                    .Case("OF", &(regs->OF))
                    .Case("DF", &(regs->DF))
                    .Case("ST0", &(regs->ST_regs.st[0]))
                    .Case("ST1", &(regs->ST_regs.st[1]))
                    .Case("ST2", &(regs->ST_regs.st[2]))
                    .Case("ST3", &(regs->ST_regs.st[3]))
                    .Case("ST4", &(regs->ST_regs.st[4]))
                    .Case("ST5", &(regs->ST_regs.st[5]))
                    .Case("ST6", &(regs->ST_regs.st[6]))
                    .Case("ST7", &(regs->ST_regs.st[7]))
                    .Case("XMM0", &(regs->XMM0))
                    .Case("XMM1", &(regs->XMM1))
                    .Case("XMM2", &(regs->XMM2))
                    .Case("XMM3", &(regs->XMM3))
                    .Case("XMM4", &(regs->XMM4))
                    .Case("XMM5", &(regs->XMM5))
                    .Case("XMM6", &(regs->XMM6))
                    .Case("XMM7", &(regs->XMM7))
#ifdef __x86_64__
                    .Case("XMM8", &(regs->XMM8))
                    .Case("XMM9", &(regs->XMM9))
                    .Case("XMM10", &(regs->XMM10))
                    .Case("XMM11", &(regs->XMM11))
                    .Case("XMM12", &(regs->XMM12))
                    .Case("XMM13", &(regs->XMM13))
                    .Case("XMM14", &(regs->XMM14))
                    .Case("XMM15", &(regs->XMM15))
#endif
                    .Case("FPU_BUSY", &(regs->FPU_FLAGS.BUSY))
                    .Case("FPU_C3", &(regs->FPU_FLAGS.C3))
                    .Case("FPU_TOP", &(regs->FPU_FLAGS.TOP))
                    .Case("FPU_C2", &(regs->FPU_FLAGS.C2))
                    .Case("FPU_C1", &(regs->FPU_FLAGS.C1))
                    .Case("FPU_C0", &(regs->FPU_FLAGS.C0))
                    .Case("FPU_ES", &(regs->FPU_FLAGS.ES))
                    .Case("FPU_SF", &(regs->FPU_FLAGS.SF))
                    .Case("FPU_PE", &(regs->FPU_FLAGS.PE))
                    .Case("FPU_UE", &(regs->FPU_FLAGS.UE))
                    .Case("FPU_OE", &(regs->FPU_FLAGS.OE))
                    .Case("FPU_ZE", &(regs->FPU_FLAGS.ZE))
                    .Case("FPU_DE", &(regs->FPU_FLAGS.DE))
                    .Case("FPU_IE", &(regs->FPU_FLAGS.IE))
                    .Case("FPU_X", &(regs->FPU_CONTROL.X))
                    .Case("FPU_RC", &(regs->FPU_CONTROL.RC))
                    .Case("FPU_PC", &(regs->FPU_CONTROL.PC))
                    .Case("FPU_PM", &(regs->FPU_CONTROL.PM))
                    .Case("FPU_UM", &(regs->FPU_CONTROL.UM))
                    .Case("FPU_OM", &(regs->FPU_CONTROL.OM))
                    .Case("FPU_ZM", &(regs->FPU_CONTROL.ZM))
                    .Case("FPU_DM", &(regs->FPU_CONTROL.DM))
                    .Case("FPU_IM", &(regs->FPU_CONTROL.IM))
                    .Case("FPU_FOPCODE", &(regs->FPU_FOPCODE))
                    .Default(NULL);

    return regptr;
}

template<typename T>
void writeToState(string regName, T regVal, mcsema::RegState *regs) {
    
    if (regName == "FPUTW")
    {
        for (int i = 0; i < STREGS_MAX; i++)
        {
            // this will be uint32_t for FPUTW, hence the
            // awfully unsafe cast
            uint8_t new_regval = *((uint32_t*)((void*)&regVal));
            uint8_t thistag = ((new_regval >> i) & 1);

            // Convert from FXSAVE format to native CPU format.
            // In FXSAVE, 0 == tag empty; 1 == tag not empty (assume valid for
            // now).
            uint8_t expanded_val = thistag == 0 ? FPU_TAG_EMPTY : FPU_TAG_VALID;
            //uint8_t expanded_val = FPU_TAG_VALID;
            regs->FPU_TAG.tag[i] = expanded_val;
        }
    }
    else
    {
        T *r = static_cast<T*>(getRegPtr(regName, regs));
        assert(r != NULL);
        *r = regVal;
    }

    return;
}

void getValueWriteToState(const string &line, mcsema::RegState &state)
{
    int k = line.find(':');
    string regName = line.substr(0, k);
    std::string v = line.substr(k+1);
    
    if (boost::starts_with(regName, "ST"))
    { // Only the STi registers are long doubles, for now.
        mcsema::nativefpu regVal;
        unsigned count=0;
        memset(&regVal, 0, sizeof(regVal));

        vector<string> hexchars;
        boost::split(hexchars, v, boost::is_any_of(" "));
        std::stringstream ss;
        // the text string we are reading has 16 bytes
        // since it is output with padding
        // only 12 are read in, as we read in without padding.
        //printf("reading fpu bytes: ");
        for(vector<string>::iterator itr = hexchars.begin();
                itr != hexchars.end() && count < sizeof(((mcsema::nativefpu*)0)->b);
                itr++, count++) 
        {

            std::string bytestr(*itr);
            boost::algorithm::trim(bytestr);

            if(bytestr == "")
                continue;

            //printf("Reading char: '%s'\n", bytestr.c_str());
            assert(count < 12);
            regVal.b[count] = strtoul(bytestr.c_str(), NULL, 16);
            //printf("%02x ", regVal.b[count]);
        }
        //printf("\n");
            

        //printf("Writing back to native value\n");
        //printf("Loaded value: %Lf\n", regVal);
        writeToState<mcsema::nativefpu>(regName, regVal, &state);
    }
    else if (boost::starts_with(regName, "XMM"))
    {
        mcsema::xmmregstate regVal;
        unsigned count=0;
        memset(&regVal, 0, sizeof(regVal));

        vector<string> hexchars;
        boost::split(hexchars, v, boost::is_any_of(" "));
        std::stringstream ss;

        for(vector<string>::iterator itr = hexchars.begin();
                itr != hexchars.end() && count < sizeof(((mcsema::xmmregstate *)0)->tag);
                itr++, count++)
        {
            
            std::string bytestr(*itr);
            boost::algorithm::trim(bytestr);
            
            if(bytestr == "")
                continue;
                
            assert(count < 16);
            regVal.tag[count] = strtoul(bytestr.c_str(), NULL, 16);           
        }

        writeToState<mcsema::xmmregstate>(regName, regVal, &state);
    }
    else if (boost::equals(regName, "FPU_FOPCODE"))
    {
        uint16_t regVal = 0;
        try {
            regVal = boost::numeric_cast<uint16_t>(boost::lexical_cast<uint32_t>(v));
        } catch (bad_cast &e) {
            cerr << "could not parse " << v << " as a uint16_t\n";
            throw e;
        }
        writeToState<uint16_t>(regName, regVal, &state);
    }
    else if (boost::starts_with(regName, "FPU_") || 
             regName == "CF" ||
             regName == "PF" ||
             regName == "AF" ||
             regName == "ZF" ||
             regName == "SF" ||
             regName == "OF" ||
             regName == "DF")
    {
        uint8_t regVal = 0;
        try {
            regVal = boost::numeric_cast<uint8_t>(boost::lexical_cast<uint32_t>(v));
        } catch (bad_cast &e) {
            cerr << "could not parse " << v << " as a uint8_t\n";
        }

        writeToState<uint8_t>(regName, regVal, &state);
    }
    else
    {
        uint64_t regVal = 0;
        try {
            regVal = boost::lexical_cast<uint64_t>(v);
        } catch (bad_cast &e) {
            cerr << "could not parse " << v << " as a uint32_t\n";
            throw e;
        }
        cout << regName << " : " << regVal <<"\n";
        writeToState<uint64_t>(regName, regVal, &state);
    }
}

static testIDToInOutT g_stateMap;

testIDToInOutT getTestCaseMap(string tests) {

    if(g_stateMap.empty() == false)
    {
        return g_stateMap;
    }

    // Open the input file as an input stream.
    ifstream inStream(tests.c_str());

    if (!inStream.is_open())
    {
        std::cerr << "Could not open: " << tests << "\n";
        exit(-1);
    }

    // Read until the ifstream is over.
    string line;
    ScanningState ss = TestCase;
    int           testCaseNumber;
    mcsema::RegState      inputState;
    mcsema::RegState      outputState;
    memset(&inputState, 0, sizeof(mcsema::RegState));
    memset(&outputState, 0, sizeof(mcsema::RegState));

#ifdef DEBUG
    cout << "Calling getTestCaseMap\n";
#endif

    while (inStream.good()) {
        getline(inStream, line, '\n');
        size_t  rPos = line.find('\r');
        if(rPos != string::npos) {
          line.erase(rPos);
        }
        switch(ss) {
            case TestCase:
                if ( line.substr(0, 8) == "TESTCASE" ) {
                    // Read out the test case number.
                    testCaseNumber = boost::lexical_cast<int>(line.substr(9));
                }
                else if ( line == "INPUTSTATE" ) {
                    ss = InputCase;
                } else {
                    // Parse error.
                }
                break;

            case InputCase:
                if (line == "OUTPUTSTATE") {
                    ss = OutputCase;
                } else {
                    // Parse the line into a reg/flag assignment.
                    getValueWriteToState(line, inputState);
                }
                break;

            case OutputCase:
                if (line == "ENDCASE") {
                    ss = TestCase;
                    // Take our current map and shove it into the g_stateMap.
                    InOutT inOut(inputState, outputState);
#ifdef DEBUG
		    printf("Adding test case: %d\n", testCaseNumber);
#endif
                    g_stateMap.insert(pair<int, InOutT>(testCaseNumber, inOut));

                    // Then zero the input and output.
                    memset(&inputState, 0, sizeof(mcsema::RegState));
                    memset(&outputState, 0, sizeof(mcsema::RegState));
                } else {
                    // Parse the line into a reg/flag assignment.
                    getValueWriteToState(line, outputState);
                }
                break;
        }
    }

#ifdef DEBUG
    cout << "Done with getTestCaseMap" << endl;
#endif

    return g_stateMap;
}

// This is a class that lets us carry state between tests.
// The state that we carry will be a single LLVM Module.
// It can also carry our instruction decoder and so on.

class ModuleTest : public ::testing::Test {
protected:
    virtual void SetUp(void) {
        // Sanity checks on register function.
#ifdef DEBUG
        printf("sizeof(mcsema::fpuregs): %ld\n", sizeof(mcsema::fpuregs));
        printf("sizeof(mcsema::RegState): %ld\n", sizeof(mcsema::RegState));
#endif
#ifdef __x86_64__

#ifdef DEBUG
        printf("sizeof(RegState) [%ld] - sizeof(((mcsema::nativefpu*)0)->pad)*STREGS_MAX [%ld] = [%ld] (316)\n", 
                sizeof(mcsema::RegState),
                sizeof(((mcsema::nativefpu*)0)->pad)*STREGS_MAX,
                sizeof(mcsema::RegState) - sizeof(((mcsema::nativefpu*)0)->pad)*STREGS_MAX);
#endif

       // assert(sizeof(mcsema::RegState) - sizeof(((mcsema::nativefpu*)0)->pad)*STREGS_MAX == 316);
#else
        assert(sizeof(mcsema::RegState) == 316);
        assert(sizeof(mcsema::fpuregs) == 96);
#endif

        llvm::InitializeAllTargetInfos();
        llvm::InitializeAllTargetMCs();
        llvm::InitializeAllAsmParsers();
        llvm::InitializeAllDisassemblers();
        llvm::InitializeNativeTarget();

        this->M = new Module("testModule", getGlobalContext());
        this->M->setTargetTriple(TRIPLE);

        // Create the disassembler objects.
        const llvm::Target          *t = NULL;
        const llvm::MCSubtargetInfo *STI = NULL;
        const llvm::MCAsmInfo       *AsmInfo = NULL;
        llvm::MCRegisterInfo        *MRI = NULL;
        const llvm::MCInstrInfo     *MCII = NULL;

#ifdef __x86_64__
        t = findDisTarget("x86-64");
        this->M->setDataLayout(
            "e-m:e-i64:64-f80:128-n8:16:32:64-S128");
        doGlobalInit(this->M);
#else
        t = findDisTarget("x86");
        this->M->setDataLayout(
            "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-f80:128:128-v64:64:64-v128:128:128-a0:0:64-f80:32:32-n8:16:32-S32");
        doGlobalInit(this->M);
#endif

        assert(t != NULL);
        STI = t->createMCSubtargetInfo( TRIPLE, "", "");

        MRI = t->createMCRegInfo(TRIPLE);
        AsmInfo = t->createMCAsmInfo(*MRI, TRIPLE);
        
        assert(t != NULL);
        assert(STI);
        assert(AsmInfo);

        // Get an inst printer.
        int AsmPrinterVariant = AsmInfo->getAssemblerDialect();
        MCII = t->createMCInstrInfo();
        llvm::MCInstPrinter
            *IP = t->createMCInstPrinter( AsmPrinterVariant, 
                                          *AsmInfo, 
                                          *MCII,
                                          *MRI,
                                          *STI);

        assert(IP);
        llvm::MCContext *Ctx = new llvm::MCContext(AsmInfo, MRI, nullptr);
        const llvm::MCDisassembler *DisAsm = t->createMCDisassembler(*STI, *Ctx);

        assert(DisAsm);

        this->Dis = DisAsm;
        this->InstPrinter = IP;

        this->testCases = getTestCaseMap("tests.out");

        // Create the native module.
        //list<NativeFunctionPtr> funcList;
        //this->natM = NativeModulePtr(new NativeModule("testMod", funcList, IP));

#define NEW_TEST(x, k) do {\
    this->caseMap.insert(pair<string,int>(x, k));\
    this->flagMap.insert(pair<string, uint64_t>(x, 0));\
    } while (0);

#define NEW_TEST_IGNOREFLAGS(x, k, f)  do {\
    this->caseMap.insert(pair<string,int>(x, k));\
    this->flagMap.insert(pair<string, uint64_t>(x, f));\
    } while (0);

        // ADD TESTS HERE.
        /*%DECLARATIONS*%/

#undef NEW_TEST
    }

    virtual void TearDown(void) {
        delete this->M;
    }

    Function *getFunctionForBuffer(string nm, uint8_t *buf, size_t len);

    void runFunctionOnState(mcsema::RegState *, Function *);

    void getStatesForTest(mcsema::RegState *, mcsema::RegState *, string);

    Module               *M;
    const MCDisassembler *Dis;
    MCInstPrinter        *InstPrinter;
    testIDToInOutT       testCases;
    testCaseToTestIDT    caseMap;
    testCaseToFlags      flagMap;
#if 0
    uint32_t             stackMem;
    void                 *stackMemPtr;
#endif
};

static void* JITFunctionCreator(const std::string &s) {
#ifdef _WIN32
    HMODULE mod;
    FARPROC proc;

    printf("WARNING: JITted code references library function: %s\n", s.c_str());

    mod = GetModuleHandle("MSVCRT");
    assert(mod != NULL);
    proc = GetProcAddress(mod, s.c_str());
    if (proc == NULL) {
        std::string s2 = s.substr(0, s.size()-1);
        proc = GetProcAddress(mod, s2.c_str());
    }

    if(proc == NULL) {
        printf("%s: Could not find function: %s\n", __FUNCTION__, s.c_str());
    }

    return proc;

#else
    printf("WARNING: JITted code references library function: %s\n", s.c_str());

    void *sym_addr = dlsym(RTLD_DEFAULT, s.c_str());
    char *error = dlerror();
    if(sym_addr == NULL && error != NULL) {
        printf("ERROR: %s\n", error);
        return NULL;
    }

    return sym_addr;

#endif
}

void ModuleTest::getStatesForTest(mcsema::RegState *inState, mcsema::RegState *outState, string testName) {
    int testId = this->caseMap.at(testName);
    InOutT states = this->testCases.at(testId);

#ifdef DEBUG
    printf("Mapping testName[%s] to testId[%d]\n", testName.c_str(), testId);
#endif
    *inState = states.first;
    *outState = states.second;
    return;
}

void ModuleTest::runFunctionOnState(mcsema::RegState *state, Function *F) {
    EngineBuilder builder(this->M);
    ExecutionEngine *EE;

    builder.setEngineKind(EngineKind::JIT);
    builder.setOptLevel(CodeGenOpt::None);
    builder.setUseMCJIT(true);

    TargetOptions to;
    to.UnsafeFPMath = true;
    
    builder.setTargetOptions(to);

    std::string errmsg;
    //printf("pre-jit DUMP:\n");
    //F->dump();

    EE = builder.create();
    EE->runStaticConstructorsDestructors(false);
    EE->DisableSymbolSearching(false);
    EE->InstallLazyFunctionCreator(JITFunctionCreator);

    // Set up the arguments to the function.
    vector<GenericValue> args;
    args.push_back(PTOGV(state));

#ifdef DEBUG
    void *ptr = EE->getPointerToFunction(F);
    F->print(llvm::outs());
    printf("function ptr is: %p\n\n", ptr);

#if 0
#ifdef _WIN32
    __debugbreak();
#else
    asm("int3");
#endif
#endif

#endif


    unsigned int cw = 0;

#ifdef _WIN32
    cw = _control87(0, 0);
    _control87(_PC_64, _MCW_PC);
#endif    

    // Run the function to get the sequences effects.
    EE->runFunction(F, args);

#ifdef _WIN32
    _control87((cw & _MCW_PC), _MCW_PC);
#endif    

    // Clean up by removing the module and deleting the engine.
    EE->removeModule(this->M);
    delete EE;

    // We leave. The effects have been written into the register state
    // structure.
    return;
}

class counting_cfg_visitor : public boost::default_bfs_visitor {
private:
    NativeFunctionPtr    natFun;
    list<NativeBlockPtr> &blocks;
public:
    counting_cfg_visitor(NativeFunctionPtr n, list<NativeBlockPtr> &l) : natFun(n), blocks(l) { }
    
    template < typename Vertex, typename Graph >
    void discover_vertex(Vertex u, const Graph &g) const {
        NativeBlockPtr  curBlock = this->natFun->block_from_id(u);

        this->blocks.push_back(curBlock);
        return;
    }

    list<NativeBlockPtr> get_blocks(void) { return this->blocks; }
};

list<NativeBlockPtr> getBlocksFromFunction(NativeFunctionPtr f) {
    CFG funcGraph = f->get_cfg();
    list<NativeBlockPtr> blocks;
    counting_cfg_visitor c(f, blocks);

    boost::breadth_first_search(funcGraph, 
                                boost::vertex(0, funcGraph), 
                                boost::visitor(c));

    return blocks;
}

Function *ModuleTest::getFunctionForBuffer(string nm, uint8_t *b, size_t l) {
    BufferMemoryObject bmo(b, l);
    list<NativeBlockPtr> blocks;
    BasicBlock *firstBB = NULL;
    BasicBlock *entryBB = NULL;
    bool broken = false;

    NativeFunctionPtr testF =
        funcFromBuff(0, bmo, this->Dis, this->InstPrinter);
    Function *testFn = initTestFunction(nm, this->M);

    entryBB = testFn->begin();
    blocks = getBlocksFromFunction(testF);

    for (list<NativeBlockPtr>::iterator it = blocks.begin();
        it != blocks.end(); ++it)
    {
        NativeBlockPtr curBlock = *it;
        list<InstPtr>  insts = curBlock->get_insts();
        BasicBlock     *curLLVMBlock;

        curLLVMBlock = bbFromStrName(curBlock->get_name(), testFn);

        if (curLLVMBlock == NULL) {
            curLLVMBlock = BasicBlock::Create(testFn->getContext(),
                                              curBlock->get_name(),
                                              testFn);
            assert(curLLVMBlock != NULL);
        }

        if (firstBB == NULL) {
            firstBB = curLLVMBlock;
        }

        list<VA> &follows = curBlock->get_follows();

        for (list<VA>::iterator i = follows.begin(); i != follows.end(); ++i) {
            VA blockBase = *i;

            // Try to look up a block that has this block's name.
            string followName = "block_0x" + to_string<VA>(blockBase, hex);
            
            BasicBlock  *fBB = bbFromStrName(followName, testFn);

            if (fBB == NULL) {
                fBB = BasicBlock::Create(testFn->getContext(),
                                         followName,
                                         testFn);
                assert(fBB != NULL);
            }
        }

        list<InstPtr>::iterator instIt = insts.begin();

        while (instIt != insts.end()) {
            InstTransResult t;
            InstPtr p = *instIt;

            t = disInstr(p, 
                         curLLVMBlock, 
                         curBlock, 
                         testFn, 
                         testF, 
                         NativeModulePtr(),
			 false); 

            if (t == TranslateError || t == TranslateErrorUnsupported) {
                broken = true;
                break;
            }

            ++instIt;
        }

        if (broken) {
            break;
        }
    }

    if (broken) {
        return NULL;
    }

    BranchInst::Create(firstBB, entryBB);

    BasicBlock *endBlock = NULL;

    // Now we have to find the block that does NOT have a terminator.
    for (Function::iterator fit = testFn->begin(); fit != testFn->end(); ++fit ) {
        BasicBlock *b = fit;

        if ( b->getTerminator() == NULL ) {
            endBlock = b;
            break;
        }
    }

    assert(endBlock != NULL);
    finiTestFunction(endBlock);

    return testFn;
}

void regStatesEq(mcsema::RegState *in, mcsema::RegState *out, uint64_t ignoreflags) {
#ifdef __x86_64__
    EXPECT_EQ(out->RAX, in->RAX);
    EXPECT_EQ(out->RBX, in->RBX);
    EXPECT_EQ(out->RCX, in->RCX);
    EXPECT_EQ(out->RDX, in->RDX);
    EXPECT_EQ(out->RDI, in->RDI);
    EXPECT_EQ(out->RSP, in->RSP);
    EXPECT_EQ(out->RBP, in->RBP);
#else
    EXPECT_EQ(out->EAX, in->EAX);
    EXPECT_EQ(out->EBX, in->EBX);
    EXPECT_EQ(out->ECX, in->ECX);
    EXPECT_EQ(out->EDX, in->EDX);
    EXPECT_EQ(out->EDI, in->EDI);
    EXPECT_EQ(out->ESP, in->ESP);
    EXPECT_EQ(out->EBP, in->EBP);
#endif

    //EXPECT_EQ(out->FPU_FOPCODE, in->FPU_FOPCODE);

    if (!(ignoreflags & FLAG_CF)) {
        EXPECT_EQ(out->CF, in->CF);
    }

    if (!(ignoreflags & FLAG_AF)) { 
        EXPECT_EQ(out->AF, in->AF);
    }

    if (!(ignoreflags & FLAG_PF)) {
        EXPECT_EQ(out->PF, in->PF);
    }

    if (!(ignoreflags & FLAG_OF)) {
        EXPECT_EQ(out->OF, in->OF);
    }

    if (!(ignoreflags & FLAG_SF)) {
        EXPECT_EQ(out->SF, in->SF);
    }

    if (!(ignoreflags & FLAG_DF)) {
        EXPECT_EQ(out->DF, in->DF);
    }

    if (!(ignoreflags & FLAG_ZF)) {
        EXPECT_EQ(out->ZF, in->ZF);
    }

#ifdef DEBUG    
    printf("Comparing [%d] : OUT[%s] vs. IN[%s]\n", 0, out->ST_regs.st[0].printMe().c_str(), in->ST_regs.st[0].printMe().c_str());
#endif
    EXPECT_EQ(out->ST_regs.st[0], in->ST_regs.st[0]);
    
#ifdef DEBUG    
    printf("Comparing [%d] : OUT[%s] vs. IN[%s]\n", 1, out->ST_regs.st[1].printMe().c_str(), in->ST_regs.st[1].printMe().c_str());
#endif
    EXPECT_EQ(out->ST_regs.st[1], in->ST_regs.st[1]);

#ifdef DEBUG    
    printf("Comparing [%d] : OUT[%s] vs. IN[%s]\n", 2, out->ST_regs.st[2].printMe().c_str(), in->ST_regs.st[2].printMe().c_str());
#endif
    EXPECT_EQ(out->ST_regs.st[2], in->ST_regs.st[2]);

#ifdef DEBUG    
    printf("Comparing [%d] : OUT[%s] vs. IN[%s]\n", 3, out->ST_regs.st[3].printMe().c_str(), in->ST_regs.st[3].printMe().c_str());
#endif
    EXPECT_EQ(out->ST_regs.st[3], in->ST_regs.st[3]);

#ifdef DEBUG    
    printf("Comparing [%d] : OUT[%s] vs. IN[%s]\n", 4, out->ST_regs.st[4].printMe().c_str(), in->ST_regs.st[4].printMe().c_str());
#endif
    EXPECT_EQ(out->ST_regs.st[4], in->ST_regs.st[4]);

#ifdef DEBUG    
    printf("Comparing [%d] : OUT[%s] vs. IN[%s]\n", 5, out->ST_regs.st[5].printMe().c_str(), in->ST_regs.st[5].printMe().c_str());
#endif
    EXPECT_EQ(out->ST_regs.st[5], in->ST_regs.st[5]);

#ifdef DEBUG    
    printf("Comparing [%d] : OUT[%s] vs. IN[%s]\n", 6, out->ST_regs.st[6].printMe().c_str(), in->ST_regs.st[6].printMe().c_str());
#endif
    EXPECT_EQ(out->ST_regs.st[6], in->ST_regs.st[6]);

#ifdef DEBUG    
    printf("Comparing [%d] : OUT[%s] vs. IN[%s]\n", 7, out->ST_regs.st[7].printMe().c_str(), in->ST_regs.st[7].printMe().c_str());
#endif
    EXPECT_EQ(out->ST_regs.st[7], in->ST_regs.st[7]);
    
#ifdef DEBUG
    printf("XMM%d: OUT[%s] vs IN[%s]\n", 0, out->XMM0.printMe().c_str(), in->XMM0.printMe().c_str());
    printf("XMM%d: OUT[%s] vs IN[%s]\n", 1, out->XMM1.printMe().c_str(), in->XMM1.printMe().c_str());
    printf("XMM%d: OUT[%s] vs IN[%s]\n", 2, out->XMM2.printMe().c_str(), in->XMM2.printMe().c_str());
    printf("XMM%d: OUT[%s] vs IN[%s]\n", 3, out->XMM3.printMe().c_str(), in->XMM3.printMe().c_str());
    printf("XMM%d: OUT[%s] vs IN[%s]\n", 4, out->XMM4.printMe().c_str(), in->XMM4.printMe().c_str());
    printf("XMM%d: OUT[%s] vs IN[%s]\n", 5, out->XMM5.printMe().c_str(), in->XMM5.printMe().c_str());
    printf("XMM%d: OUT[%s] vs IN[%s]\n", 6, out->XMM6.printMe().c_str(), in->XMM6.printMe().c_str());
    printf("XMM%d: OUT[%s] vs IN[%s]\n", 7, out->XMM7.printMe().c_str(), in->XMM7.printMe().c_str());
#endif 

    EXPECT_EQ(out->XMM0, in->XMM0);    
    EXPECT_EQ(out->XMM1, in->XMM1);
    EXPECT_EQ(out->XMM2, in->XMM2);
    EXPECT_EQ(out->XMM3, in->XMM3);
    EXPECT_EQ(out->XMM4, in->XMM4);
    EXPECT_EQ(out->XMM5, in->XMM5);
    EXPECT_EQ(out->XMM6, in->XMM6);
    EXPECT_EQ(out->XMM7, in->XMM7);

    if (!(ignoreflags & FLAG_FPU_BUSY)) {
        EXPECT_EQ(out->FPU_FLAGS.BUSY, in->FPU_FLAGS.BUSY);
    }

    if (!(ignoreflags & FLAG_FPU_C3)) {
        EXPECT_EQ(out->FPU_FLAGS.C3, in->FPU_FLAGS.C3);
    }

    if (!(ignoreflags & FLAG_FPU_TOP)) {
        EXPECT_EQ(out->FPU_FLAGS.TOP, in->FPU_FLAGS.TOP);
    }

    if (!(ignoreflags & FLAG_FPU_C2)) {
        EXPECT_EQ(out->FPU_FLAGS.C2, in->FPU_FLAGS.C2);
    }

    if (!(ignoreflags & FLAG_FPU_C1)) {
        EXPECT_EQ(out->FPU_FLAGS.C1, in->FPU_FLAGS.C1);
    }

    if (!(ignoreflags & FLAG_FPU_C0)) {
        EXPECT_EQ(out->FPU_FLAGS.C0, in->FPU_FLAGS.C0);
    }

    if (!(ignoreflags & FLAG_FPU_ES)) {
        EXPECT_EQ(out->FPU_FLAGS.ES, in->FPU_FLAGS.ES);
    }

    if (!(ignoreflags & FLAG_FPU_SF)) {
        EXPECT_EQ(out->FPU_FLAGS.SF, in->FPU_FLAGS.SF);
    }

    if (!(ignoreflags & FLAG_FPU_PE)) {
        EXPECT_EQ(out->FPU_FLAGS.PE, in->FPU_FLAGS.PE);
    }

    if (!(ignoreflags & FLAG_FPU_UE)) {
        EXPECT_EQ(out->FPU_FLAGS.UE, in->FPU_FLAGS.UE);
    }

    if (!(ignoreflags & FLAG_FPU_OE)) {
        EXPECT_EQ(out->FPU_FLAGS.OE, in->FPU_FLAGS.OE);
    }

    if (!(ignoreflags & FLAG_FPU_ZE)) {
        EXPECT_EQ(out->FPU_FLAGS.ZE, in->FPU_FLAGS.ZE);
    }

    if (!(ignoreflags & FLAG_FPU_DE)) {
        EXPECT_EQ(out->FPU_FLAGS.DE, in->FPU_FLAGS.DE);
    }

    if (!(ignoreflags & FLAG_FPU_IE)) {
        EXPECT_EQ(out->FPU_FLAGS.IE, in->FPU_FLAGS.IE);
    }

    EXPECT_EQ(out->FPU_TAG, in->FPU_TAG);

    return;
}

void* get_low_addr(uint32_t len) {
    void *v = ((void *)0x00001000);
    void *k;

    while (1) {
#ifdef _WIN32
        k = VirtualAlloc(v,
                         len,
                         MEM_RESERVE|MEM_COMMIT,
                         PAGE_READWRITE);
#else
        k = mmap(v,
                 len,
                 PROT_READ|PROT_WRITE,
#ifdef __linux__
                 MAP_ANON|MAP_PRIVATE|MAP_32BIT,
#else
                 MAP_ANON|MAP_PRIVATE,
#endif
                 -1,
                 0);
#endif

#ifdef _WIN32
        if (k != NULL) {
#else
        if (k != MAP_FAILED) {
#endif
            break;
        } else {
            v = (void *)(((ptrdiff_t)v) + len);
        }
    }

#ifndef _WIN32
#ifdef __x86_64__
    assert((((ptrdiff_t)k) >> 32) == 0);
#endif // sizeof(ptrdiff_t)
#endif // _WIN32
    return k;
}

void release_low_addr(void *v, uint32_t len) {
#ifdef _WIN32
    VirtualFree(v, STACK_LEN, MEM_RELEASE);
#else
    munmap(v, STACK_LEN);
#endif
    return;
}

// The new input and output ESP/EBP must differ from each other in the same way
// that they did in the original input.
void fixStatesForStack(mcsema::RegState *inState, mcsema::RegState *outState, void *stack) {
    // Compute deltas for EBP and ESP.
#ifdef __x86_64__
    int64_t espebpDelta =  ((int64_t)inState->RBP) - ((int64_t)inState->RSP);
    int64_t espDelta = ((int64_t)inState->RSP) - ((int64_t)outState->RSP);
    int64_t ebpDelta = ((int64_t)inState->RBP) - ((int64_t)outState->RBP);

    if(espebpDelta > 0){
        inState->RBP = (uint64_t)((ptrdiff_t)stack - 32);
        outState->RBP = (uint64_t)((ptrdiff_t)stack - 32);

        inState->RSP = (uint64_t)((ptrdiff_t)stack - 32) - espebpDelta;
        outState->RSP = (uint64_t)((ptrdiff_t)stack - 32) - espebpDelta;
    } else {
        inState->RSP = (uint64_t)((ptrdiff_t)stack - 32);
        outState->RSP = (uint64_t)((ptrdiff_t)stack - 32);

        inState->RBP = (uint64_t)((ptrdiff_t)stack - 32) + espebpDelta;
        outState->RBP = (uint64_t)((ptrdiff_t)stack - 32) + espebpDelta;
    }


    //inState->RSP = (uint64_t)((ptrdiff_t)stack);
    //outState->RSP = (uint64_t)((ptrdiff_t)stack);

    //inState->RBP = (uint64_t)((ptrdiff_t)stack) + (espebpDelta);
    //outState->RBP = (uint64_t)((ptrdiff_t)stack) + (espebpDelta);

    outState->RSP -= espDelta;
    outState->RBP -= ebpDelta;

#else
    int32_t espDelta = ((int32_t)inState->ESP) - ((int32_t)outState->ESP);
    int32_t ebpDelta = ((int32_t)inState->EBP) - ((int32_t)outState->EBP);

    inState->ESP = (uint32_t)((ptrdiff_t)stack - 32);
    outState->ESP = (uint32_t)((ptrdiff_t)stack - 32);

    inState->EBP = (uint32_t)((ptrdiff_t)stack);
    outState->EBP = (uint32_t)((ptrdiff_t)stack);

    outState->ESP -= espDelta;
    outState->EBP -= ebpDelta;
#endif
    return;
}

// The PIN based tester outputs FPU registers in their native order:
// that is, ST0 = REGISTERS[FPU CW.TOP].
// The state.ST_regs[0] structure does not use a TOP-relative
// representation: that is, ST_regs[0] == REGISTERS[0].
// This function converts the ST_regs representation to a top-relative
// representation for comparison with PIN outputs.

void toTopRelative(mcsema::RegState &state) {
    mcsema::fpuregs tmpregs;

    uint8_t topval = state.FPU_FLAGS.TOP;
#ifdef DEBUG
    printf("pre transform top is: %d\n", topval);
    for (unsigned i = 0; i < STREGS_MAX; i++)
    {
        printf("pre transform regs array [%d] = %s\n", i, state.ST_regs.st[i].printMe().c_str());
    }
#endif

    for (unsigned i = topval; i < STREGS_MAX; i++) {
        tmpregs.st[i - topval] = state.ST_regs.st[i];
    }

    for (unsigned i = 0; i < topval; i++) {
        tmpregs.st[i + STREGS_MAX - topval] = state.ST_regs.st[i];
    }

   memcpy(&state.ST_regs.st[0], &tmpregs.st[0], sizeof(tmpregs.st)); 

#ifdef DEBUG
    printf("post transform top is: %d\n", topval);
    for (unsigned i = 0; i < STREGS_MAX; i++)
    {
        printf("post transform regs array [%d] = %s\n", i, state.ST_regs.st[i].printMe().c_str());
    }
#endif
}

void fromTopRelative(mcsema::RegState &state) {
    mcsema::fpuregs tmpregs;

    uint8_t topval = state.FPU_FLAGS.TOP;
#ifdef DEBUG
    printf("pre transform top is: %d\n", topval);
    for (unsigned i = 0; i < STREGS_MAX; i++)
    {
        printf("pre transform regs array [%d] = %s\n", i, state.ST_regs.st[i].printMe().c_str());
    }
#endif
    
    for (unsigned i = topval; i < STREGS_MAX; i++) {
        tmpregs.st[i] = state.ST_regs.st[i - topval];
    }
    
    for (unsigned i = 0; i < topval; i++) {
        tmpregs.st[i] = state.ST_regs.st[i + STREGS_MAX - topval];
    }

   memcpy(&state.ST_regs.st[0], &tmpregs.st[0], sizeof(tmpregs.st)); 

#ifdef DEBUG
    printf("post transform top is: %d\n", topval);
    for (unsigned i = 0; i < STREGS_MAX; i++)
    {
        printf("post transform regs array [%d] = %s\n", i, state.ST_regs.st[i].printMe().c_str());
    }
#endif
}

#ifdef DEBUG
void printXMM(mcsema::RegState *in)
{
    printf("XMM%d: %s\n", 0, in->XMM0.printMe().c_str());
    printf("XMM%d: %s\n", 1, in->XMM1.printMe().c_str());
    printf("XMM%d: %s\n", 2, in->XMM2.printMe().c_str());
    printf("XMM%d: %s\n", 3, in->XMM3.printMe().c_str());
    printf("XMM%d: %s\n", 4, in->XMM4.printMe().c_str());
    printf("XMM%d: %s\n", 5, in->XMM5.printMe().c_str());
    printf("XMM%d: %s\n", 6, in->XMM6.printMe().c_str());
    printf("XMM%d: %s\n", 7, in->XMM7.printMe().c_str());
}
#endif
#
#define IN_OUT_TEST(testName, bytes) {\
    Function *testFn =\
        this->getFunctionForBuffer(testName, byteArr, sizeof(byteArr));\
    EXPECT_TRUE(testFn != NULL);\
    if (testFn != NULL) {\
        mcsema::RegState inputState;\
        mcsema::RegState outputState;\
        this->getStatesForTest(&inputState, &outputState, testName);\
        void *b = get_low_addr(STACK_LEN);\
        assert(b != NULL);\
        fixStatesForStack(&inputState, &outputState, (void*)((ptrdiff_t)b + (STACK_LEN - 8)));\
        fromTopRelative(inputState);\
        inputState.printMe(testName "_PRE_INPUT");\
        outputState.printMe(testName "_PRE_OUTPUT");\
        this->runFunctionOnState(&inputState, testFn);\
        toTopRelative(inputState);\
        inputState.printMe(testName "_POST_INPUT");\
        outputState.printMe(testName "_POST_OUTPUT");\
        regStatesEq(&inputState, &outputState, this->flagMap[testName]);\
        release_low_addr(b, STACK_LEN);\
    }\
}

#define NO_MEM_TEST(testName, bytes) {\
    Function *testFn =\
        this->getFunctionForBuffer(testName, byteArr, sizeof(byteArr));\
    EXPECT_TRUE(testFn != NULL);\
    if (testFn != NULL) {\
        mcsema::RegState inputState;\
        mcsema::RegState outputState;\
        this->getStatesForTest(&inputState, &outputState, testName);\
        fromTopRelative(inputState);\
        this->runFunctionOnState(&inputState, testFn);\
        toTopRelative(inputState);\
        regStatesEq(&inputState, &outputState, this->flagMap[testName]);\
    }\
}


/*%DEFINITIONS%*/

TEST_F(ModuleTest, StructureLayout) {
  //test and make sure that the layout of the RegState matches between
  //our EE and our structure definition
  FunctionType  *FT = getBaseFunctionType(this->M);
  Constant      *FC = this->M->getOrInsertFunction(("aligntest"), FT);
  Function      *F = dyn_cast<Function>(FC);
  Value         *arg = F->arg_begin(); 

  assert(F != NULL);

  BasicBlock  *block = BasicBlock::Create(F->getContext(), "B", F);

  //write patterns we recognize into the structure
  
#define PATTERN_TO_OFF(p, b, o) { \
  Value *gepV[] =  \
    { ConstantInt::get(Type::getInt64Ty(block->getContext()), 0), \
      ConstantInt::get(Type::getInt32Ty(block->getContext()), o)}; \
  Instruction *vgep = GetElementPtrInst::CreateInBounds(arg, gepV, "", block);\
  Value *c = ConstantInt::get(IntegerType::get(block->getContext(), b), p);\
  Value *st = new StoreInst(c, vgep, block);\
  assert(st != NULL); }

#define PATTERN_TO_OFF2(p, o1, o2) { \
  Value *gepV[] =  \
    { ConstantInt::get(Type::getInt64Ty(block->getContext()), 0), \
      ConstantInt::get(Type::getInt32Ty(block->getContext()), o1), \
      ConstantInt::get(Type::getInt64Ty(block->getContext()), o2)}; \
  Instruction *vgep = GetElementPtrInst::CreateInBounds(arg, gepV, "", block);\
  Value *c = ConstantInt::get(Type::getInt64Ty(block->getContext()), p);\
  Value *st = new StoreInst(c, vgep, block);\
  assert(st != NULL); }


  PATTERN_TO_OFF(6543, 64, 0);
  PATTERN_TO_OFF(6540, 64, 1);
  PATTERN_TO_OFF(6530, 64, 2);
  PATTERN_TO_OFF(6528, 64, 3);
  PATTERN_TO_OFF(6400, 64, 4);
  PATTERN_TO_OFF(6129, 64, 5);
  PATTERN_TO_OFF(5981, 64, 6);
  PATTERN_TO_OFF(4129, 64, 7);

  PATTERN_TO_OFF(1, 1, 17);
  PATTERN_TO_OFF(0, 1, 18);
  PATTERN_TO_OFF(1, 1, 19);
  PATTERN_TO_OFF(0, 1, 20);
  PATTERN_TO_OFF(1, 1, 21);
  PATTERN_TO_OFF(0, 1, 22);
  PATTERN_TO_OFF(1, 1, 23);

  PATTERN_TO_OFF(0, 1, 25);

  ReturnInst::Create(block->getContext(), block);

#undef PATTERN_TO_OFF
#undef PATTERN_TO_OFF2

  //make a context that is 0-filled
  mcsema::RegState  inState;
  mcsema::RegState  outState;

  memset(&inState, 0, sizeof(mcsema::RegState));
  memset(&outState, 0, sizeof(mcsema::RegState));
#ifdef __x86_64__
  outState.RAX = 6543;
  outState.RBX = 6540;
  outState.RCX = 6530;
  outState.RDX = 6528;
  outState.RSI = 6400;
  outState.RDI = 6129;
  outState.RSP = 5981;
  outState.RBP = 4129;
#else
  outState.EAX = 6543;
  outState.EBX = 6540;
  outState.ECX = 6530;
  outState.EDX = 6528;
  outState.ESI = 6400;
  outState.EDI = 6129;
  outState.ESP = 5981;
  outState.EBP = 4129;
#endif

  outState.CF = 1;
  outState.PF = 0;
  outState.AF = 1;
  outState.ZF = 0;
  outState.SF = 1;
  outState.OF = 0;
  outState.DF = 1;

  outState.FPU_FLAGS.BUSY = 0;

  //evaluate the funciton in an EE
  this->runFunctionOnState(&inState, F);

  //check and see if the register effects match up
  EXPECT_EQ(inState, outState);

}


